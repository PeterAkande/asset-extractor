name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Set up Python for backend testing
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          
    #   - name: Run backend tests
    #     working-directory: ./backend
    #     run: pytest
        
      # Set up Node.js for frontend testing
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/asset-extractor/package-lock.json'
          
      - name: Install frontend dependencies
        working-directory: ./frontend/asset-extractor
        run: npm ci
        
      - name: Build frontend
        working-directory: ./frontend/asset-extractor
        run: npm run build
        
    #   - name: Run frontend tests
    #     working-directory: ./frontend/asset-extractor
    #     run: npm test -- --passWithNoTests
  
  deploy:
    name: Deploy Application
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/asset-extractor/package-lock.json'
          
      - name: Build frontend for production
        working-directory: ./frontend/asset-extractor
        run: |
          npm ci
          npm run build
          
      # Prepare deployment package with proper verification
      - name: Prepare deployment package
        run: |
          mkdir -p deployment
          
          # Verify backend directory exists
          if [ ! -d "backend" ]; then
            echo "Error: Backend directory not found"
            exit 1
          fi
          cp -r backend deployment/
          
          # Verify frontend build directory exists
          if [ ! -d "frontend/asset-extractor/build" ]; then
            echo "Frontend build directory not found, checking if it's in a different location..."
            
            # Check if build is in a different location (like 'dist' for Vite projects)
            if [ -d "frontend/asset-extractor/dist" ]; then
              echo "Found build in dist directory"
              mkdir -p deployment/frontend
              cp -r frontend/asset-extractor/dist/* deployment/frontend/
            else
              # If we still can't find it, create a placeholder
              echo "Creating placeholder frontend directory"
              mkdir -p deployment/frontend
              echo "<html><body><h1>Build in progress</h1></body></html>" > deployment/frontend/index.html
            fi
          else
            # Copy frontend build directory
            mkdir -p deployment/frontend
            cp -r frontend/asset-extractor/build/* deployment/frontend/
          fi
          
          # Add a verification file to test permissions
          echo "This file verifies that nginx can read the content" > deployment/frontend/verify.txt
          
          # Copy deployment scripts if they exist
          if [ -d "deployment_scripts" ]; then
            cp deployment_scripts/* deployment/ || echo "No deployment scripts found"
          fi
          
          # Create deployment script
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Starting deployment process..."
          
          # Update system packages
          echo "Updating system packages..."
          sudo apt-get update
          sudo apt-get upgrade -y
          
          # Install Python dependencies
          echo "Installing Python dependencies..."
          sudo apt-get install -y python3 python3-pip python3-venv
          
          # Install Node.js and npm if not already installed
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js and npm..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Install Nginx if not already installed
          if ! command -v nginx &> /dev/null; then
            echo "Installing Nginx..."
            sudo apt-get install -y nginx
          fi
          
          # Create application directory if it doesn't exist
          sudo mkdir -p /var/www/assets_extractor
          sudo chown -R $USER:$USER /var/www/assets_extractor
          
          # Set up backend
          echo "Setting up backend..."
          cd /var/www/assets_extractor/backend
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn



          # Install Playwright browsers
          playwright install
          
          # Set proper permissions for nginx to access the files
          echo "Setting correct permissions for nginx..."
          sudo chmod -R 755 /var/www/assets_extractor
          sudo find /var/www/assets_extractor -type f -exec chmod 644 {} \;
          sudo find /var/www/assets_extractor/backend/venv -type d -exec chmod 755 {} \;
          sudo find /var/www/assets_extractor/backend/venv -type f -exec chmod 644 {} \;
          sudo find /var/www/assets_extractor/backend/venv/bin -type f -exec chmod 755 {} \;
          
          # Set up systemd service for backend
          echo "Setting up systemd service for backend..."
          sudo tee /etc/systemd/system/assets-extractor.service > /dev/null << 'EOSERVICE'
          [Unit]
          Description=Assets Extractor Backend Service
          After=network.target
          
          [Service]
          User=www-data
          Group=www-data
          WorkingDirectory=/var/www/assets_extractor/backend
          ExecStart=/var/www/assets_extractor/backend/venv/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app -b 127.0.0.1:8000
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOSERVICE
          
          # Configure Nginx with improved error handling and proper access
          echo "Configuring Nginx..."
          sudo tee /etc/nginx/sites-available/assets-extractor > /dev/null << 'EONGINX'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              
              # Server name - use IP or domain name
              server_name _;
              
              # Enable access and error logs for debugging
              access_log /var/log/nginx/assets-extractor-access.log;
              error_log /var/log/nginx/assets-extractor-error.log;
              
              # API requests with proper proxy settings
              location /api/ {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  
                  # Timeouts and buffering settings
                  proxy_buffering off;
                  proxy_cache off;
                  proxy_read_timeout 3600s;
                  
                  # Add CORS headers
                  add_header 'Access-Control-Allow-Origin' '*' always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
              }
              
              # Frontend static files
              location / {
                  root /var/www/assets_extractor/frontend;
                  try_files $uri $uri/ /index.html =404;
                  autoindex off;
                  # Add proper content type for JS and CSS
                  types {
                      text/html               html htm shtml;
                      text/css                css;
                      text/javascript         js;
                      application/javascript  js;
                      image/png               png;
                      image/gif               gif;
                      image/jpeg              jpeg jpg;
                      image/svg+xml           svg svgz;
                      application/font-woff   woff;
                      application/x-font-ttf  ttf;
                  }
              }
              
              # Custom error pages
              error_page 403 /403.html;
              error_page 404 /404.html;
              error_page 500 502 503 504 /50x.html;
              
              # Location for custom error pages
              location = /403.html {
                  internal;
                  root /var/www/assets_extractor/frontend;
              }
              
              location = /404.html {
                  internal;
                  root /var/www/assets_extractor/frontend;
              }
              
              location = /50x.html {
                  internal;
                  root /var/www/assets_extractor/frontend;
              }
          }
          EONGINX
          
          # Create simple error pages
          echo "Creating error pages..."
          mkdir -p /var/www/assets_extractor/frontend
          
          cat > /var/www/assets_extractor/frontend/403.html << 'EOERROR'
          <!DOCTYPE html>
          <html>
          <head>
              <title>403 Forbidden</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  h1 { color: #d9534f; }
                  .container { max-width: 600px; margin: 0 auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>403 Forbidden</h1>
                  <p>Sorry, you don't have permission to access this resource.</p>
                  <p>Please contact the administrator if you believe this is an error.</p>
              </div>
          </body>
          </html>
          EOERROR
          
          cat > /var/www/assets_extractor/frontend/404.html << 'EOERROR'
          <!DOCTYPE html>
          <html>
          <head>
              <title>404 Not Found</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  h1 { color: #d9534f; }
                  .container { max-width: 600px; margin: 0 auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>404 Not Found</h1>
                  <p>The page you're looking for doesn't exist.</p>
                  <p><a href="/">Go back to homepage</a></p>
              </div>
          </body>
          </html>
          EOERROR
          
          cat > /var/www/assets_extractor/frontend/50x.html << 'EOERROR'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Server Error</title>
              <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  h1 { color: #d9534f; }
                  .container { max-width: 600px; margin: 0 auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Server Error</h1>
                  <p>Sorry, something went wrong. Please try again later.</p>
              </div>
          </body>
          </html>
          EOERROR
          
          # Enable the site and restart Nginx
          sudo ln -sf /etc/nginx/sites-available/assets-extractor /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration before restarting
          echo "Testing Nginx configuration..."
          sudo nginx -t
          
          # Fix permissions for the entire directory structure
          echo "Setting final permissions..."
          sudo chown -R www-data:www-data /var/www/assets_extractor/frontend
          sudo find /var/www/assets_extractor/frontend -type d -exec chmod 755 {} \;
          sudo find /var/www/assets_extractor/frontend -type f -exec chmod 644 {} \;
          
          # Verify nginx can access files
          echo "Verifying nginx access..."
          sudo -u www-data ls -la /var/www/assets_extractor/frontend/
          
          # Restart services
          echo "Restarting services..."
          sudo systemctl restart nginx
          
          # Start/restart the backend service
          sudo systemctl daemon-reload
          sudo systemctl enable assets-extractor
          sudo systemctl restart assets-extractor
          
          # Print useful debugging information
          echo "Deployment completed successfully!"
          echo "----------"
          echo "Nginx access log: sudo tail -f /var/log/nginx/assets-extractor-access.log"
          echo "Nginx error log: sudo tail -f /var/log/nginx/assets-extractor-error.log"
          echo "Backend service log: sudo journalctl -u assets-extractor -f"
          echo "----------"
          EOF
          
          chmod +x deployment/deploy.sh
          
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          
      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
        run: |
          # Create deployment directory on server
          ssh -i ~/.ssh/deploy_key.pem $SERVER_USERNAME@$SERVER_HOST "sudo mkdir -p /var/www/assets_extractor && sudo chown -R $SERVER_USERNAME:$SERVER_USERNAME /var/www/assets_extractor"
          
          # Synchronize files to server
          rsync -avz -e "ssh -i ~/.ssh/deploy_key.pem" --delete deployment/ $SERVER_USERNAME@$SERVER_HOST:/var/www/assets_extractor/
          
          # Execute deployment script
          ssh -i ~/.ssh/deploy_key.pem $SERVER_USERNAME@$SERVER_HOST "cd /var/www/assets_extractor && sudo bash deploy.sh"
          
      - name: Clean up SSH key
        run: rm -f ~/.ssh/deploy_key.pem
